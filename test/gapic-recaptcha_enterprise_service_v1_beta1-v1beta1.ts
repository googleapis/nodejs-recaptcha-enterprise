// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
const recaptchaenterpriseservicev1beta1Module = require('../src');


const FAKE_STATUS_CODE = 1;
class FakeError{
    name: string;
    message: string;
    code: number;
    constructor(n: number){
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError|null, response?: {} | null): void;
}

export class Operation{
    constructor(){};
    promise() {};
}
function mockSimpleGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}, options: {}, callback: Callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        } 
    };
}
describe('v1beta1.RecaptchaEnterpriseServiceV1Beta1Client', () => {
    it('has servicePath', () => {
        const servicePath = recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client();
        assert(client);
    });    
    it('should create a client with gRPC fallback', () => {
        const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
            fallback: true,
        });
        assert(client);
    });
    describe('createAssessment', () => {
        it('invokes createAssessment without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createAssessment = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createAssessment(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createAssessment with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.ICreateAssessmentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createAssessment = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createAssessment(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('annotateAssessment', () => {
        it('invokes annotateAssessment without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.annotateAssessment = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.annotateAssessment(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes annotateAssessment with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IAnnotateAssessmentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.annotateAssessment = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.annotateAssessment(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createKey', () => {
        it('invokes createKey without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.ICreateKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createKey = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createKey(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createKey with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.ICreateKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createKey = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createKey(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getKey', () => {
        it('invokes getKey without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IGetKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getKey = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getKey(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getKey with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IGetKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getKey = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getKey(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateKey', () => {
        it('invokes updateKey without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IUpdateKeyRequest = {};
            request.key = {};
            request.key.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateKey = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateKey(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateKey with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IUpdateKeyRequest = {};
            request.key = {};
            request.key.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateKey = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateKey(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteKey', () => {
        it('invokes deleteKey without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IDeleteKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteKey = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteKey(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteKey with error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IDeleteKeyRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteKey = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteKey(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('listKeys', () => {
        it('invokes listKeys without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IListKeysRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listKeys = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listKeys(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listKeysStream', () => {
        it('invokes listKeysStream without error', done => {
            const client = new recaptchaenterpriseservicev1beta1Module.v1beta1.RecaptchaEnterpriseServiceV1Beta1Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request: protosTypes.google.cloud.recaptchaenterprise.v1beta1.IListKeysRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listKeys = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listKeysStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
});
